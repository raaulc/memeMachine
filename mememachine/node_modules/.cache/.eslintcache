[{"/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/index.js":"1","/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/reportWebVitals.js":"2","/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/App/App.js":"3","/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/Meme/Meme.js":"4","/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/MemeGenerated/MemeGenerated.js":"5"},{"size":631,"mtime":1677109221336,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1677108793088,"results":"8","hashOfConfig":"7"},{"size":485,"mtime":1677124322624,"results":"9","hashOfConfig":"7"},{"size":2686,"mtime":1677123190072,"results":"10","hashOfConfig":"7"},{"size":965,"mtime":1677119381182,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4ri8jh",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/index.js",[],[],"/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/reportWebVitals.js",[],[],"/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/App/App.js",[],[],"/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/Meme/Meme.js",["29"],[],"import React, { useEffect, useState } from 'react'\nimport styles from './styles.module.css'\nimport { useNavigate } from 'react-router-dom'\n\nexport const Meme = () => {\n\n    const [memes, setMemes] = useState([])\n    const [memeIndex, setMemeIndex] = useState(0)\n    const [captions, setCaptions] = useState([])\n\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        fetch('https://api.imgflip.com/get_memes').then(res => res.json().then(res => {\n         const _memes = res.data.memes\n         shuffleMemes(_memes)\n         setMemes(_memes)\n         console.log(_memes)\n        }))\n    },[])\n\n    useEffect(() => {\n        if(memes.length) {\n            setCaptions(Array(memes[memeIndex].box_count).fill(''))\n        }\n\n    },[memeIndex, memes])\n\n    useEffect(() => {\n        console.log(captions)\n    }, [captions])\n\n    const changeMeme = () => {\n        setMemeIndex(memeIndex + 1)\n    }\n\n    const generateMeme = () => {\n        console.log(\"Generated !\")\n\n        const currentMeme = memes[memeIndex]\n        const formData = new FormData()\n\n        formData.append('username' , 'raaulc')\n        formData.append('password', 'Rahul@123')\n        formData.append('template_id', currentMeme.id)\n\n        captions.forEach((c, index) => formData.append(`boxes[${index}][text]`,c))\n\n        fetch('https://api.imgflip.com/caption_image', {\n            method: 'POST',\n            body: formData\n        }).then(res => {\n            res.json().then(res => {\n                navigate(`/generated?url=${res.data.url}`);\n            })\n        })\n    }\n\n    const shuffleMemes = (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n    \n    const updateCaption = (e, index) => {\n        const text = e.target.value || ''\n\n        setCaptions(\n            captions.map((c,i) => {\n                if (index === i) {\n                    return text\n                } else {\n                    return c\n                }\n            })\n        )\n    }\n\n    return (\n        memes.length ? \n        <div className= {styles.container}>\n            <button onClick={generateMeme}\n            className= {styles.generate}>Generate</button>\n\n            <button onClick={changeMeme}\n            className= {styles.next}>Next</button>\n\n            {\n                captions.map((c,index) => (\n                    <input onChange = {(e) => updateCaption(e, index)} key={index}/>\n                ))\n            }\n\n            <img src= {memes[memeIndex].url}/>\n        </div> : \n        <> </>\n    );\n  }","/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/MemeGenerated/MemeGenerated.js",["30"],[],"import {useNavigate, useLocation} from 'react-router-dom'\nimport styles from './styles.module.css'\nimport {useClipboard} from 'use-clipboard-copy'\nimport { useState } from 'react'\n\nexport const MemeGenerated = () => {\n    const navigate = useNavigate()\n    const location = useLocation()\n    const clipboard = useClipboard()\n    const url = new URLSearchParams(location.search).get('url')\n\n    const [copied, setCopied] = useState(false)\n\n    const copyLink = () => {\n        clipboard.copy(url)\n        setCopied(true)\n    }\n\n    return (\n        <div className= {styles.container}>\n            <button onClick = {() => navigate(`/`)}\n                className = {styles.home}>\n                    Go Back\n            </button>\n            {url && <img src= {url} />} \n\n            <button onClick = {copyLink}\n                className = {styles.copy}>\n                    {copied ? \"Link Copied !\" : \"Copy Link\" }\n            </button>\n        </div>\n        )\n}",{"ruleId":"31","severity":1,"message":"32","line":97,"column":13,"nodeType":"33","endLine":97,"endColumn":47},{"ruleId":"31","severity":1,"message":"32","line":25,"column":21,"nodeType":"33","endLine":25,"endColumn":39},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]