{"ast":null,"code":"var _jsxFileName = \"/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/Meme/Meme.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Meme = () => {\n  _s2();\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(res => res.json().then(res => {\n      const _memes = res.data.memes;\n      shuffleMemes(_memes);\n      setMemes(_memes);\n    }));\n  }, []);\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(''));\n    }\n  }, [memeIndex, memes]);\n  useEffect(() => {\n    console.log(captions);\n  }, [captions]);\n  const changeMeme = () => {\n    setMemeIndex(memeIndex + 1);\n  };\n  const generateMeme = () => {\n    console.log(\"Generated !\");\n    const currentMeme = memes[memeIndex];\n    const formData = new FormData();\n    formData.append('username', 'raaulc');\n    formData.append('password', 'Rahul@123');\n    formData.append('template_id', currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n    fetch('https://api.imgflip.com/caption_image', {\n      method: 'POST',\n      body: formData\n    }).then(res => {\n      var _s = $RefreshSig$();\n      _s(res.json().then(_s(res => {\n        _s();\n        const navigate = useNavigate();\n        navigate('/generated');\n      }, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n        return [useNavigate];\n      })), \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n        return [useNavigate];\n      });\n    });\n  };\n  const shuffleMemes = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n  const updateCaption = (e, index) => {\n    const text = e.target.value || '';\n    setCaptions(captions.map((c, i) => {\n      if (index === i) {\n        return text;\n      } else {\n        return c;\n      }\n    }));\n  };\n  return memes.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateMeme,\n      className: styles.generate,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeMeme,\n      className: styles.next,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), captions.map((c, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => updateCaption(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: memes[memeIndex].url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \" \"\n  }, void 0, false);\n};\n_s2(Meme, \"Ff9mizYkkVGewi0BHdj4j+b3uvQ=\", true);\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useEffect","useState","styles","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Meme","_s2","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","history","useHistory","fetch","then","res","json","_memes","data","shuffleMemes","length","Array","box_count","fill","console","log","changeMeme","generateMeme","currentMeme","formData","FormData","append","id","forEach","c","index","method","body","_s","$RefreshSig$","navigate","array","i","j","Math","floor","random","temp","updateCaption","e","text","target","value","map","className","container","children","onClick","generate","fileName","_jsxFileName","lineNumber","columnNumber","next","onChange","src","url","_c","$RefreshReg$"],"sources":["/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/Meme/Meme.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styles from './styles.module.css'\nimport { useNavigate } from 'react-router-dom'\n\nexport const Meme = () => {\n\n    const [memes, setMemes] = useState([])\n    const [memeIndex, setMemeIndex] = useState(0)\n    const [captions, setCaptions] = useState([])\n\n    const history = useHistory()\n\n    useEffect(() => {\n        fetch('https://api.imgflip.com/get_memes').then(res => res.json().then(res => {\n\n         const _memes = res.data.memes\n         shuffleMemes(_memes)\n         setMemes(_memes)\n\n        }))\n    },[])\n\n    useEffect(() => {\n        if(memes.length) {\n            setCaptions(Array(memes[memeIndex].box_count).fill(''))\n        }\n\n    },[memeIndex, memes])\n\n    useEffect(() => {\n        console.log(captions)\n    }, [captions])\n\n    const changeMeme = () => {\n        setMemeIndex(memeIndex + 1)\n    }\n\n    const generateMeme = () => {\n        console.log(\"Generated !\")\n\n        const currentMeme = memes[memeIndex]\n        const formData = new FormData()\n\n        formData.append('username' , 'raaulc')\n        formData.append('password', 'Rahul@123')\n        formData.append('template_id', currentMeme.id)\n\n        captions.forEach((c, index) => formData.append(`boxes[${index}][text]`,c))\n\n        fetch('https://api.imgflip.com/caption_image', {\n            method: 'POST',\n            body: formData\n        }).then(res => {\n            res.json().then(res => {\n                const navigate = useNavigate();\n                navigate('/generated');\n            })\n        })\n    }\n\n    const shuffleMemes = (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n    \n    const updateCaption = (e, index) => {\n        const text = e.target.value || ''\n\n        setCaptions(\n            captions.map((c,i) => {\n                if (index === i) {\n                    return text\n                } else {\n                    return c\n                }\n            })\n        )\n    }\n\n    return (\n        memes.length ? \n        <div className= {styles.container}>\n            <button onClick={generateMeme}\n            className= {styles.generate}>Generate</button>\n\n            <button onClick={changeMeme}\n            className= {styles.next}>Next</button>\n\n            {\n                captions.map((c,index) => (\n                    <input onChange = {(e) => updateCaption(e, index)} key={index}/>\n                ))\n            }\n\n            <img src= {memes[memeIndex].url}/>\n        </div> : \n        <> </>\n    );\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}