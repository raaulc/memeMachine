{"ast":null,"code":"var _jsxFileName = \"/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/Meme/Meme.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Meme = () => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(res => res.json().then(res => {\n      const _memes = res.data.memes;\n      shuffleMemes(_memes);\n      setMemes(_memes);\n    }));\n  }, []);\n  const changeMeme = () => {\n    setMemeIndex(memeIndex + 1);\n  };\n  const generateMeme = () => {\n    console.log(\"Generated !\");\n  };\n  const shuffleMemes = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n  return memes.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateMeme,\n      className: styles.generate,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeMeme,\n      className: styles.next,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: memes[memeIndex].url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \" \"\n  }, void 0, false);\n};\n_s(Meme, \"wa2PpYtJgbXr246I+pl5JyqUn80=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useEffect","useState","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Meme","_s","memes","setMemes","memeIndex","setMemeIndex","fetch","then","res","json","_memes","data","shuffleMemes","changeMeme","generateMeme","console","log","array","i","length","j","Math","floor","random","temp","className","container","children","onClick","generate","fileName","_jsxFileName","lineNumber","columnNumber","next","src","url","_c","$RefreshReg$"],"sources":["/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/Meme/Meme.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styles from './styles.module.css'\n\n\nexport const Meme = () => {\n\n    const [memes, setMemes] = useState([])\n    const [memeIndex, setMemeIndex] = useState(0)\n\n    useEffect(() => {\n        fetch('https://api.imgflip.com/get_memes').then(res => res.json().then(res => {\n\n         const _memes = res.data.memes\n         shuffleMemes(_memes)\n         setMemes(_memes)\n\n        }))\n    },[])\n\n    const changeMeme = () => {\n        setMemeIndex(memeIndex + 1)\n    }\n\n    const generateMeme = () => {\n        console.log(\"Generated !\")\n    }\n\n    const shuffleMemes = (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n    \n\n    return (\n        memes.length ? \n        <div className= {styles.container}>\n            <button onClick={generateMeme}\n            className= {styles.generate}>Generate</button>\n\n            <button onClick={changeMeme}\n            className= {styles.next}>Next</button>\n            <img src= {memes[memeIndex].url}/>\n        </div> : \n        <> </>\n    );\n  }"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGxC,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAE7CD,SAAS,CAAC,MAAM;IACZa,KAAK,CAAC,mCAAmC,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAACF,IAAI,CAACC,GAAG,IAAI;MAE7E,MAAME,MAAM,GAAGF,GAAG,CAACG,IAAI,CAACT,KAAK;MAC7BU,YAAY,CAACF,MAAM,CAAC;MACpBP,QAAQ,CAACO,MAAM,CAAC;IAEjB,CAAC,CAAC,CAAC;EACP,CAAC,EAAC,EAAE,CAAC;EAEL,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACrBR,YAAY,CAACD,SAAS,GAAG,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACvBC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC9B,CAAC;EAED,MAAMJ,YAAY,GAAIK,KAAK,IAAK;IAC5B,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACvC,IAAIE,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC3C,IAAIM,IAAI,GAAGP,KAAK,CAACC,CAAC,CAAC;MACnBD,KAAK,CAACC,CAAC,CAAC,GAAGD,KAAK,CAACG,CAAC,CAAC;MACnBH,KAAK,CAACG,CAAC,CAAC,GAAGI,IAAI;IACnB;EACJ,CAAC;EAGD,OACItB,KAAK,CAACiB,MAAM,gBACZtB,OAAA;IAAK4B,SAAS,EAAG9B,MAAM,CAAC+B,SAAU;IAAAC,QAAA,gBAC9B9B,OAAA;MAAQ+B,OAAO,EAAEd,YAAa;MAC9BW,SAAS,EAAG9B,MAAM,CAACkC,QAAS;MAAAF,QAAA,EAAC;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eAE9CpC,OAAA;MAAQ+B,OAAO,EAAEf,UAAW;MAC5BY,SAAS,EAAG9B,MAAM,CAACuC,IAAK;MAAAP,QAAA,EAAC;IAAI;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACtCpC,OAAA;MAAKsC,GAAG,EAAGjC,KAAK,CAACE,SAAS,CAAC,CAACgC;IAAI;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAChC,gBACNpC,OAAA,CAAAE,SAAA;IAAA4B,QAAA,EAAE;EAAC,iBAAG;AAEZ,CAAC;AAAA1B,EAAA,CA7CUD,IAAI;AAAAqC,EAAA,GAAJrC,IAAI;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}