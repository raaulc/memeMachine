{"ast":null,"code":"var _jsxFileName = \"/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/Meme/Meme.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Meme = () => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes').then(res => res.json().then(res => {\n      const _memes = res.data.memes;\n      shuffleMemes(_memes);\n      setMemes(_memes);\n    }));\n  }, []);\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(''));\n    }\n  }, [memeIndex, memes]);\n  useEffect(() => {\n    console.log(captions);\n  }, [captions]);\n  const changeMeme = () => {\n    setMemeIndex(memeIndex + 1);\n  };\n  const generateMeme = () => {\n    console.log(\"Generated !\");\n  };\n  const shuffleMemes = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n  const updateCaption = (e, index) => {\n    const text = e.target.value || '';\n    setCaptions(captions.map((c, i) => {\n      if (index === i) {\n        return text;\n      } else {\n        return i;\n      }\n    }));\n  };\n  return memes.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateMeme,\n      className: styles.generate,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeMeme,\n      className: styles.next,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), captions.map((c, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => updateCaption(e, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: memes[memeIndex].url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \" \"\n  }, void 0, false);\n};\n_s(Meme, \"czkSf8QiotT4+GSSYioNoRUfk9c=\");\n_c = Meme;\nvar _c;\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useEffect","useState","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Meme","_s","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","fetch","then","res","json","_memes","data","shuffleMemes","length","Array","box_count","fill","console","log","changeMeme","generateMeme","array","i","j","Math","floor","random","temp","updateCaption","e","index","text","target","value","map","c","className","container","children","onClick","generate","fileName","_jsxFileName","lineNumber","columnNumber","next","onChange","src","url","_c","$RefreshReg$"],"sources":["/Users/rahul.rathod/Desktop/Learning/MemeMachine/mememachine/src/Meme/Meme.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styles from './styles.module.css'\n\n\nexport const Meme = () => {\n\n    const [memes, setMemes] = useState([])\n    const [memeIndex, setMemeIndex] = useState(0)\n    const [captions, setCaptions] = useState([])\n\n    useEffect(() => {\n        fetch('https://api.imgflip.com/get_memes').then(res => res.json().then(res => {\n\n         const _memes = res.data.memes\n         shuffleMemes(_memes)\n         setMemes(_memes)\n\n        }))\n    },[])\n\n    useEffect(() => {\n        if(memes.length) {\n            setCaptions(Array(memes[memeIndex].box_count).fill(''))\n        }\n\n    },[memeIndex, memes])\n\n    useEffect(() => {\n        console.log(captions)\n    }, [captions])\n\n    const changeMeme = () => {\n        setMemeIndex(memeIndex + 1)\n    }\n\n    const generateMeme = () => {\n        console.log(\"Generated !\")\n    }\n\n    const shuffleMemes = (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n    \n    const updateCaption = (e, index) => {\n        const text = e.target.value || ''\n\n        setCaptions(\n            captions.map((c,i) => {\n                if (index === i) {\n                    return text\n                } else {\n                    return i\n                }\n            })\n        )\n    }\n\n    return (\n        memes.length ? \n        <div className= {styles.container}>\n            <button onClick={generateMeme}\n            className= {styles.generate}>Generate</button>\n\n            <button onClick={changeMeme}\n            className= {styles.next}>Next</button>\n\n            {\n                captions.map((c,index) => (\n                    <input onChange = {(e) => updateCaption(e, index)} key={index}/>\n                ))\n            }\n\n            <img src= {memes[memeIndex].url}/>\n        </div> : \n        <> </>\n    );\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}